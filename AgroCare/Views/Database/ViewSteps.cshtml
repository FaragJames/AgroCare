@{
    Layout = "_DatabaseLayout";
}
@model List<PlanDto>
@inject IService<Models.Models.Action> actionService
@inject IMapper mapper
@{
    var actions = actionService.GetAll().Select(a => mapper.Map<ActionDto>(a)).ToList();
    var plansId = Model.Select(p => p.Id).ToList();
}


<div class="recent_payments">
    <div class="title">
        <h2>Steps</h2>
        <div class="action">
            <button onclick="addHeader()" data-bs-toggle="modal" data-bs-target="#step-edit">Add</button>
        </div>
    </div>
    <table>
        <tr>
            <th>Id</th>
            <th>Plan Id</th>
            <th>Estimated Start Date</th>
            <th>Estimated Finish Date</th>
            <th>Checked Status</th>
            <th>Action</th>
            <th></th>
        </tr>
        @{
            int i = 0;
        }
        @foreach (var plan in Model)
        {
            foreach (var step in plan.Steps)
            {
                <tr id="tr@(i)">
                    <td data-key="Id">@step.Id</td>
                    <td data-key="PlanId">@plan.Id</td>
                    <td data-key="EstimatedStartDate">@step.EstimatedStartDate.ToString("yyyy-MM-dd")</td>
                    <td data-key="EstimatedFinishDate">@step.EstimatedFinishDate.ToString("yyyy-MM-dd")</td>
                    <td data-key="IsChecked">@step.IsChecked.ToString()</td>

                    <td data-key="ActionId" style="display: none">@step.Action.Id</td>
                    <td data-key="none">@step.Action.Name</td>

                    <td data-key="none">
                        <div class="icon">
                            <span onclick="fillEditInfo('tr@(i)')" class="material-symbols-outlined" data-bs-toggle="modal" data-bs-target="#step-edit">surgical</span>
                            <span class="material-symbols-outlined" onclick="deleteRecord('tr@(i)')">delete</span>
                        </div>
                    </td>
                </tr>
                i++;
            }
        }
    </table>
</div>
<!-- start EDIT step -->
<div class="modal fade" id="step-edit" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-10" id="exampleModalLabel">Edit Step</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div class="">
                        <div class="main-user-info">
                            <div class="row1">
                                <div class="user-input-box">
                                    <label style="color: black;">Id:</label>
                                    <input type="text" name="Id" readonly value="0"/>
                                </div>
                                <div class="user-input-box">
                                    <label style="color: black;">Plan Id:</label>
                                    <select required name="PlanId">
                                        @foreach (var item in plansId)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                </div>
                                <div class="user-input-box">
                                    <label style="color: black;">Start Date:</label>
                                    <input type="date" name="EstimatedStartDate" required />
                                </div>
                            </div>
                            <div class="row2">
                                <div class="user-input-box">
                                    <label style="color: black;">End Date:</label>
                                    <input type="date" name="EstimatedFinishDate" required/>
                                </div>
                                <div class="user-input-box">
                                    <label style="color: black;">Checked Status:</label>
                                    <select name="IsChecked" required>
                                        <option value="True">Yes</option>
                                        <option value="False">No</option>
                                    </select>
                                </div>
                                <div class="user-input-box">
                                    <label style="color: black;">Action:</label>
                                    <select required name="ActionId">
                                        @foreach (var action in actions)
                                        {
                                            <option value="@action.Id">@action.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="send"><input type="submit" value="Edit"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- end EDIT step -->

<script>
    function addHeader() {
        document.querySelector('#step-edit h1').textContent = "Add Step";
        document.querySelector('#step-edit [type="submit"]').value = "Add";
    }

    function fillEditInfo(trId) {
        document.querySelector('#step-edit h1').textContent = "Edit Step";
        document.querySelector('#step-edit [type="submit"]').value = "Edit";

        let cells = document.getElementById(trId).querySelectorAll('td');
        let data = {};

        cells.forEach(cell => {
            let key = cell.getAttribute('data-key');
            if (key !== 'none') {
                data[key] = cell.textContent;
            }
        });

        document.querySelector('#step-edit [name="Id"]').value = data.Id;
        document.querySelector('#step-edit [name="PlanId"]').value = data.PlanId;
        document.querySelector('#step-edit [name="EstimatedStartDate"]').value = data.EstimatedStartDate;
        document.querySelector('#step-edit [name="EstimatedFinishDate"]').value = data.EstimatedFinishDate;
        document.querySelector('#step-edit [name="IsChecked"]').value = data.IsChecked;
        document.querySelector('#step-edit [name="ActionId"]').value = data.ActionId;
    }

    function deleteRecord(trId) {
        let cells = document.getElementById(trId).querySelectorAll('td');
        let data = {};

        cells.forEach(cell => {
            let key = cell.getAttribute('data-key');
            if (key !== 'none') {
                data[key] = cell.textContent;
            }
        });
        data.key = "Step";

        fetch('/database/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        }).then(response => response.text())
            .then(data => {
                if (data === 'true') {
                    location.reload();
                }
            });
    }

    document.querySelector('form').addEventListener('submit', event => {
        event.preventDefault();
        let form = document.querySelector('form');
        let formData = {};

        const today = "@DateOnly.FromDateTime(DateTime.Now).ToString("yyyy-MM-dd")";
        const start = form.elements['EstimatedStartDate'].value;
        const finish = form.elements['EstimatedFinishDate'].value;
        if (start < today || start > finish || finish < today) {
            alert('Start/Finish Date is incorrect.');
            return;
        }

        formData.Id = form.elements['Id'].value;
        formData.PlanId = form.elements['PlanId'].value;
        formData.EstimatedStartDate = form.elements['EstimatedStartDate'].value;
        formData.EstimatedFinishDate = form.elements['EstimatedFinishDate'].value;
        formData.IsChecked = form.elements['IsChecked'].value;
        formData.ActionId = form.elements['ActionId'].value;
        formData.key = 'Step';

        let header = document.querySelector('#step-edit h1').textContent;
        let action;
        if (header === 'Add Step') {
            action = 'add';
        } else {
            action = 'edit';
        }
        fetch(`/database/${action}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        }).then(response => response.text())
            .then(data => {
                if (data === 'true') {
                    location.reload();
                }
            });
    });
</script>